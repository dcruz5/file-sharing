plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'gh.filesharing'
version '1.0.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourceSets {
    main {
        resources {
            srcDirs 'src/main/resources'
        }
    }
}

application {
    mainModule = 'gh.filesharing.client'
    mainClass = 'gh.filesharing.client.MainApplication'
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation 'at.favre.lib:bcrypt:0.10.2'
    implementation 'com.formdev:flatlaf:3.2'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'

    implementation("com.google.code.gson:gson:2.8.9")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'

    implementation 'org.openjfx:javafx-controls:17'
    implementation 'org.openjfx:javafx-swing:17'

    testImplementation 'org.mockito:mockito-core:3.12.4'      // Core mockito
    testImplementation 'org.mockito:mockito-inline:3.12.4'
}

test {
    useJUnitPlatform()

    // Properly configure module access for testing
    jvmArgs '--add-opens', 'gh.filesharing.client/gh.filesharing.client.Utils=org.junit.platform.commons'
    jvmArgs '--add-opens', 'gh.filesharing.client/gh.filesharing.client.Utils=org.mockito'
    jvmArgs '--add-reads', 'gh.filesharing.client=org.junit.jupiter.api'
    jvmArgs '--add-reads', 'gh.filesharing.client=org.mockito'
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}